// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Myrtus.Clarity.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Myrtus.Clarity.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250113163205_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Myrtus.Clarity.Core.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Myrtus.Clarity.Domain.Roles.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feature");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33261a4a-c423-4876-8f15-e40068aea5ca"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(569),
                            Feature = "users",
                            Name = "users:read"
                        },
                        new
                        {
                            Id = new Guid("9f79a54c-0b54-4de5-94b9-8582a5f32e78"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1840),
                            Feature = "users",
                            Name = "users:create"
                        },
                        new
                        {
                            Id = new Guid("25bb194c-ea15-4339-9f45-5a895c51b626"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1846),
                            Feature = "users",
                            Name = "users:update"
                        },
                        new
                        {
                            Id = new Guid("559dd4ec-4d2e-479d-a0a9-5229ecc04fb4"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1849),
                            Feature = "users",
                            Name = "users:delete"
                        },
                        new
                        {
                            Id = new Guid("d066e4ee-6af2-4857-bd40-b9b058fa2201"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1851),
                            Feature = "roles",
                            Name = "roles:read"
                        },
                        new
                        {
                            Id = new Guid("940c88ad-24fe-4d86-a982-fa5ea224edba"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1853),
                            Feature = "roles",
                            Name = "roles:create"
                        },
                        new
                        {
                            Id = new Guid("346d3cc6-ac81-42b1-8539-cd53f42b6566"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1855),
                            Feature = "roles",
                            Name = "roles:update"
                        },
                        new
                        {
                            Id = new Guid("386e40e9-da38-4d2f-8d02-ac4cbaddf760"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1856),
                            Feature = "roles",
                            Name = "roles:delete"
                        },
                        new
                        {
                            Id = new Guid("0eeb5f27-10fd-430a-9257-a8457107141a"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1858),
                            Feature = "permissions",
                            Name = "permissions:read"
                        },
                        new
                        {
                            Id = new Guid("3050d953-5dcf-4eb0-a18d-a3ce62a0dd3c"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1859),
                            Feature = "auditlogs",
                            Name = "auditlogs:read"
                        },
                        new
                        {
                            Id = new Guid("a03a127b-9a03-46a0-b709-b6919f2598be"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1861),
                            Feature = "notifications",
                            Name = "notifications:read"
                        },
                        new
                        {
                            Id = new Guid("a5585e9e-ec65-431b-9bb9-9bbc1663ebb8"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 797, DateTimeKind.Utc).AddTicks(1862),
                            Feature = "notifications",
                            Name = "notifications:update"
                        });
                });

            modelBuilder.Entity("Myrtus.Clarity.Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 799, DateTimeKind.Utc).AddTicks(4150),
                            IsDefault = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Myrtus.Clarity.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2025, 1, 13, 16, 32, 4, 895, DateTimeKind.Utc).AddTicks(9898),
                            IdentityId = "b3398ff2-1b43-4af7-812d-eb4347eecbb8"
                        });
                });

            modelBuilder.Entity("role_permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.ToTable("role_permission", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("33261a4a-c423-4876-8f15-e40068aea5ca")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("9f79a54c-0b54-4de5-94b9-8582a5f32e78")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("25bb194c-ea15-4339-9f45-5a895c51b626")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("559dd4ec-4d2e-479d-a0a9-5229ecc04fb4")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("d066e4ee-6af2-4857-bd40-b9b058fa2201")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("940c88ad-24fe-4d86-a982-fa5ea224edba")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("346d3cc6-ac81-42b1-8539-cd53f42b6566")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("386e40e9-da38-4d2f-8d02-ac4cbaddf760")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("0eeb5f27-10fd-430a-9257-a8457107141a")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("3050d953-5dcf-4eb0-a18d-a3ce62a0dd3c")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("a03a127b-9a03-46a0-b709-b6919f2598be")
                        },
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            PermissionId = new Guid("a5585e9e-ec65-431b-9bb9-9bbc1663ebb8")
                        });
                });

            modelBuilder.Entity("role_user", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_role_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_role_user_user_id");

                    b.ToTable("role_user", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("4b606d86-3537-475a-aa20-26aadd8f5cfd"),
                            UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7")
                        });
                });

            modelBuilder.Entity("Myrtus.Clarity.Domain.Users.User", b =>
                {
                    b.OwnsOne("Myrtus.Clarity.Domain.Users.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ix_users_email");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                                    Value = "sercanates91@gmail.com"
                                });
                        });

                    b.OwnsOne("Myrtus.Clarity.Domain.Users.ValueObjects.FirstName", "FirstName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                                    Value = "Sercan"
                                });
                        });

                    b.OwnsOne("Myrtus.Clarity.Domain.Users.ValueObjects.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                                    Value = "Ateş"
                                });
                        });

                    b.OwnsOne("Myrtus.Clarity.Domain.Users.ValueObjects.NotificationPreference", "NotificationPreference", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("IsEmailNotificationEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("email_notification");

                            b1.Property<bool>("IsInAppNotificationEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("in_app_notification");

                            b1.Property<bool>("IsPushNotificationEnabled")
                                .HasColumnType("boolean")
                                .HasColumnName("push_notification");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("55c7f429-0916-4d84-8b76-d45185d89aa7"),
                                    IsEmailNotificationEnabled = true,
                                    IsInAppNotificationEnabled = true,
                                    IsPushNotificationEnabled = true
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FirstName")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();

                    b.Navigation("NotificationPreference")
                        .IsRequired();
                });

            modelBuilder.Entity("role_permission", b =>
                {
                    b.HasOne("Myrtus.Clarity.Domain.Roles.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role_permission_permissions_PermissionId");

                    b.HasOne("Myrtus.Clarity.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role_permission_roles_RoleId");
                });

            modelBuilder.Entity("role_user", b =>
                {
                    b.HasOne("Myrtus.Clarity.Domain.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role_user_roles_RoleId");

                    b.HasOne("Myrtus.Clarity.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role_user_users_UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
